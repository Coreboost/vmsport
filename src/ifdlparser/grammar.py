class Form
  def __init__(self, name)
    self.name = name
    self.contents = []
  def generate()
    print "FORM " + self.name
    for item in self.contents:
      item.generate()
    print "END FORM"

class Form_data
  def __init__(self)
    self.contents = []
  def generate()
    print "FORM DATA"
    for item in self.contents:
      item.generate()
    print "END DATA"

class Form_record
  def __init__(self, name)
    self.name = name
    self.contents = []
  def generate()
    print "FORM RECORD " + self.name
    for item in self.contents:
      item.generate()
    print "END RECORD"

class Layout
  def __init__(self, name)
    self.name = name
    self.contents = []
  def generate()
    print "LAYOUT " + self.name
    for item in self.contents:
      item.generate()
    print "END LAYOUT"

stack = []

def push(item):
  stack.append(item)

def pop():
  popped = stack.pop()
  if len(stack) == 0:
    popped.generate()



# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class IFDLScanner(runtime.Scanner):
    patterns = [
        ('[ \r\t\n]+', re.compile('[ \r\t\n]+')),
        ('FORM', re.compile('FORM')),
        ('END_FORM', re.compile('END[ \t]+FORM')),
        ('NAME', re.compile('\\w+')),
        ('FORM_DATA', re.compile('FORM[ \t]+DATA')),
        ('END_DATA', re.compile('END[ \t]+DATA')),
        ('FORM_RECORD', re.compile('FORM[ \t]+RECORD')),
        ('END_RECORD', re.compile('END[ \t]+RECORD')),
        ('LAYOUT', re.compile('LAYOUT')),
        ('END_LAYOUT', re.compile('END[ \t]+LAYOUT')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'[ \r\t\n]+':None,},str,*args,**kw)

class IFDL(runtime.Parser):
    Context = runtime.Context
    def form_declaration(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'form_declaration', [])
        FORM = self._scan('FORM', context=_context)
        NAME = self._scan('NAME', context=_context)
        push(Form(NAME))
        while self._peek('FORM_RECORD', 'FORM_DATA', 'END_FORM', 'LAYOUT', context=_context) == 'FORM_DATA':
            form_data_declaration = self.form_data_declaration(_context)
        while self._peek('END_FORM', 'LAYOUT', 'FORM_RECORD', context=_context) == 'FORM_RECORD':
            form_record_declaration = self.form_record_declaration(_context)
        while self._peek('END_FORM', 'LAYOUT', context=_context) == 'LAYOUT':
            layout_declaration = self.layout_declaration(_context)
        END_FORM = self._scan('END_FORM', context=_context)
        pop()

    def form_data_declaration(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'form_data_declaration', [])
        FORM_DATA = self._scan('FORM_DATA', context=_context)
        push(Form_data())
        END_DATA = self._scan('END_DATA', context=_context)
        pop()

    def form_record_declaration(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'form_record_declaration', [])
        FORM_RECORD = self._scan('FORM_RECORD', context=_context)
        NAME = self._scan('NAME', context=_context)
        push(Form_record(NAME))
        END_RECORD = self._scan('END_RECORD', context=_context)
        pop()

    def layout_declaration(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'layout_declaration', [])
        LAYOUT = self._scan('LAYOUT', context=_context)
        NAME = self._scan('NAME', context=_context)
        push(Layout(NAME))
        END_LAYOUT = self._scan('END_LAYOUT', context=_context)
        pop()


def parse(rule, text):
    P = IFDL(IFDLScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
