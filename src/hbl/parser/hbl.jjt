options {
  MULTI=true;
}
PARSER_BEGIN(Hbl)
  public class Hbl {
    public static void main( String[] args ) {
      System.out.println("Reading from standard input...");
      Hbl parser = new Hbl( System.in );
      try {
        SimpleNode node = parser.Start();
        System.out.println(node.generate().toString());
        System.out.println("Thank you.");
      } catch (Exception e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
  }
PARSER_END(Hbl)


SKIP : { "---" : FirstlineMultilineComment }
<FirstlineMultilineComment> SKIP : {"\n" : WithinMultilineComment}
<FirstlineMultilineComment> SKIP : { <~[]> }
<WithinMultilineComment> SKIP : { "---" : LastlineMultilineComment }
<WithinMultilineComment> SKIP : { <~[]> }
<LastlineMultilineComment> SKIP : {"\n" : DEFAULT}
<LastlineMultilineComment> SKIP : { <~[]> }
SKIP : { "--" : SinglelineComment }
<SinglelineComment> SKIP : {"\n" : DEFAULT}
<SinglelineComment> SKIP : { <~[]> }
SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n" }
TOKEN : { < PERIOD : "." > }
TOKEN : { < COMMA : "," > }
TOKEN : { < COLON : ":" > }
TOKEN : { < DASH : "-" > }
TOKEN : { < LEFT_PAREN : "(" > }
TOKEN : { < RIGHT_PAREN : ")" > }
TOKEN : { < NUMBER : (["0"-"9"])+ > }
TOKEN : { < ACCOUNTS : "Accounts:" > }
TOKEN : { < ACCOUNT : "Account:" > }
TOKEN : { < HORSES : "Horses:" > }
TOKEN : { < TRACKS : "Tracks:" > }
TOKEN : { < INCLUDE : "Include:" > }
TOKEN : { < MEETING : "Meeting:" > }
TOKEN : { < RACEDAY : "RaceDay:" > }
TOKEN : { < LEG : "Leg" > }
TOKEN : { < DD : "DD:" > }
TOKEN : { < V75 : "V75:" > }
TOKEN : { < BET : "Bet" > }
TOKEN : { < DD_1 : "DD-1" > }
TOKEN : { < DD_2 : "DD-2" > }
TOKEN : { < ALL_HORSES : "A" > }
TOKEN : { < IDENTIFIER : (["A"-"Z", "a"-"z", "_"])(["A"-"Z", "a"-"z", "0"-"9", "_"])* > }
TOKEN : { < STRING_LITERAL : ("\"")(~["\""])*("\"") > }

SimpleNode Start() : {}
{
  (Accounts() | Horses() | Tracks() | Include())*
  (Meeting())*
  (RaceDay())*
  <EOF>
  { return jjtThis; }
}

ASTName Name() :
{
  Token name;
}
{
  (name=<IDENTIFIER>{jjtThis.setName(name.image);return jjtThis;})|(name=<STRING_LITERAL>{jjtThis.setName(name.image.substring(1, name.image.length()-1));return jjtThis;})
}

void Include() :
{
  Token path;
}
{
  <INCLUDE> path=<STRING_LITERAL>{jjtThis.setPath(path.image.substring(1, path.image.length()-1));}
}

void AccountSpec() :
{
  Token amount;
  ASTName name;
}
{
  name=Name() <COLON> amount=<NUMBER>
  {
    jjtThis.setName(name.getName());
    jjtThis.setAmount(Integer.parseInt(amount.image));
  }
}

void Accounts() : {}
{
  <ACCOUNTS>
  AccountSpec() (<COMMA> AccountSpec())*<PERIOD>
}

void HorseSpec() :
{
  Token rank;
  ASTName name;
}
{
  name=Name() <COLON> rank=<NUMBER>
  {
    jjtThis.setName(name.getName());
    jjtThis.setRank(Integer.parseInt(rank.image));
  }
}

void Horses() : {}
{
  <HORSES>
  HorseSpec()(<COMMA> HorseSpec())*<PERIOD>
}

void TrackSpec() :
{
  ASTName name;
}
{
  name=Name()
  {
    jjtThis.setName(name.getName());
  }
}

void Tracks() : {}
{
  <TRACKS>
  TrackSpec()(<COMMA> TrackSpec())*<PERIOD>
}

ASTDate Date() :
{
  Token year;
  Token month;
  Token day;
}
{
  year=<NUMBER><DASH>month=<NUMBER><DASH>day=<NUMBER>
  {
    jjtThis.setDate(Integer.parseInt(year.image), Integer.parseInt(month.image), Integer.parseInt(day.image));
    return jjtThis;
  }
}

void DDSpec() : {}
{
  <DD>LegList()<PERIOD>
}

void LegList() :
{
  Token leg;
}
{
  leg=<NUMBER>{ jjtThis.addLeg(Integer.parseInt(leg.image)); }(<COMMA> leg=<NUMBER>{ jjtThis.addLeg(Integer.parseInt(leg.image)); })*
}

void V75Spec() : {}
{
  <V75>LegList()<PERIOD>
}

void PoolSpecs() : {}
{
  (DDSpec()|V75Spec())*
}

void StartList() :
{
  ASTName name;
}
{
  name=Name(){ jjtThis.addHorse(name.getName()); }(<COMMA> name=Name(){ jjtThis.addHorse(name.getName()); })*
}

void LegSpec() :
{
  Token leg;
}
{
  <LEG>leg=<NUMBER><COLON>StartList()<PERIOD>
  { jjtThis.setLeg(Integer.parseInt(leg.image)); }
}

void LegSpecs() : {}
{
    (LegSpec())+
}

void Meeting() :
{
  ASTName track;
  ASTDate date;
}
{
  <MEETING> track=Name() date=Date()
  PoolSpecs()
  LegSpecs()
  <PERIOD>
  {
    jjtThis.setTrack(track.getName());
    jjtThis.setDate(date.toString());
  }
}

void RaceDay() :
{
  ASTName track;
  ASTDate date;
}
{
  <RACEDAY> track=Name() date=Date()
  (Bet())* (LegResult()[Bet()]) +
  <PERIOD>
  {
    jjtThis.setTrack(track.getName());
    jjtThis.setDate(date.toString());
  }
}

void LegResult() :
{
  Token leg;
}
{
  <LEG>leg=<NUMBER><COLON> [ResultList()] <PERIOD>
  {jjtThis.setLeg(Integer.parseInt(leg.image));}
}

void ResultList() :
{
  ASTResultEntry entry;
}
{
  entry=ResultEntry(){ jjtThis.addEntry(entry.getHorses()); } (<COMMA> entry=ResultEntry(){ jjtThis.addEntry(entry.getHorses()); })*
}

ASTResultEntry ResultEntry() :
{
  Token number;
  ASTTie tie;
}
{
  (number=<NUMBER>{jjtThis.setEntry(Integer.parseInt(number.image)); return jjtThis; } | tie=Tie()  { jjtThis.setEntry(tie.getHorses()); return jjtThis; }
)
}

ASTTie Tie() :
{
  Token horse;
}
{
  <LEFT_PAREN> horse=<NUMBER>{ jjtThis.addHorse(Integer.parseInt(horse.image)); } (<COMMA> horse=<NUMBER> { jjtThis.addHorse(Integer.parseInt(horse.image)); })* <RIGHT_PAREN>
  { return jjtThis; }
}

void Bet() : {}
{
  DDBet()
}

void DDBet() :
{
  Token amount;
  ASTName betID;
  ASTName accountID;
  ASTHorseSelection selection;
}
{
  <BET> <DD> betID=Name() {jjtThis.setBetID(betID.getName());} amount=<NUMBER> {jjtThis.setAmount(Integer.parseInt(amount.image));}
  [<ACCOUNT> accountID=Name() {jjtThis.setAccountID(accountID.getName());} [<PERIOD>]]
  <DD_1> [<COLON>] selection=HorseSelection() { selection.setRace(1); }
  <DD_2> [<COLON>] selection=HorseSelection() { selection.setRace(2); }
}

ASTHorseSelection HorseSelection() :
{
  Token horse;
}
{
  (<ALL_HORSES> {jjtThis.setAllHorses(true);} <PERIOD>) { return jjtThis; } |
   (horse=<NUMBER>{ jjtThis.addHorse(Integer.parseInt(horse.image)); } (<COMMA> horse=<NUMBER> { jjtThis.addHorse(Integer.parseInt(horse.image)); })*) <PERIOD> { return jjtThis; }
}
