options {
  MULTI=true;
}
PARSER_BEGIN(Hbl)
  public class Hbl {
    public static void main( String[] args ) {
      System.out.println("Reading from standard input...");
      Hbl parser = new Hbl( System.in );
      try {
        SimpleNode node = parser.Start();
        System.out.println(node.generate().toString());
        System.out.println("Thank you.");
      } catch (Exception e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    }
  }
PARSER_END(Hbl)



SKIP : { "---" : FirstlineMultilineComment }
<FirstlineMultilineComment> SKIP : {"\n" : WithinMultilineComment}
<FirstlineMultilineComment> SKIP : { <~[]> }
<WithinMultilineComment> SKIP : { "---" : LastlineMultilineComment }
<WithinMultilineComment> SKIP : { <~[]> }
<LastlineMultilineComment> SKIP : {"\n" : DEFAULT}
<LastlineMultilineComment> SKIP : { <~[]> }
SKIP : { "--" : SinglelineComment }
<SinglelineComment> SKIP : {"\n" : DEFAULT}
<SinglelineComment> SKIP : { <~[]> }
SKIP : { " " }
SKIP : { "\n" | "\r" | "\r\n" }
TOKEN : { < PERIOD : "." > }
TOKEN : { < COMMA : "," > }
TOKEN : { < COLON : ":" > }
TOKEN : { < DASH : "-" > }
TOKEN : { < NUMBER : (["0"-"9"])+ > }
TOKEN : { < ACCOUNTS : "Accounts:" > }
TOKEN : { < HORSES : "Horses:" > }
TOKEN : { < TRACKS : "Tracks:" > }
TOKEN : { < INCLUDE : "Include:" > }
TOKEN : { < MEETING : "Meeting:" > }
TOKEN : { < LEG : "Leg" > }
TOKEN : { < DD : "DD:" > }
TOKEN : { < V75 : "V75:" > }
TOKEN : { < IDENTIFIER : (["A"-"Z", "a"-"z", "_"])(["A"-"Z", "a"-"z", "0"-"9", "_"])* > }
TOKEN : { < STRING_LITERAL : ("\"")(~["\""])*("\"") > }

SimpleNode Start() : {}
{
  (Accounts() | Horses() | Tracks() | Include())*
  (Meeting())*
  <EOF>
  { return jjtThis; }
}

void Name(): {}
{
  <IDENTIFIER>|<STRING_LITERAL>
}

void Include() : {}
{
  <INCLUDE> <STRING_LITERAL>
}

void AccountSpec() :
{
  Token number;
}
{
  Name() <COLON> number=<NUMBER>
  {
    jjtThis.setAmount(number.image);
  }
}

void Accounts() : {}
{
  <ACCOUNTS>
  AccountSpec() (<COMMA> AccountSpec())*<PERIOD>
}

void HorseSpec() : {}
{
  Name() <COLON> <NUMBER>
}

void Horses() : {}
{
  <HORSES>
  HorseSpec()(<COMMA> HorseSpec())*<PERIOD>
}

void TrackSpec() : {}
{
  Name()
}

void Tracks() : {}
{
  <TRACKS>
  TrackSpec()(<COMMA> TrackSpec())*<PERIOD>
}

void Date() : {}
{
  <NUMBER><DASH><NUMBER><DASH><NUMBER>
}

void DDSpec() : {}
{
  <DD>LegList()<PERIOD>
}

void LegList() : {}
{
  <NUMBER>(<COMMA> <NUMBER>)*
}

void V75Spec() : {}
{
  <V75>LegList()<PERIOD>
}

void PoolSpecs() : {}
{
  (DDSpec()|V75Spec())*
}

void StartList() : {}
{
  Name()(<COMMA> Name())*
}

void LegSpec() : {}
{
  <LEG><NUMBER><COLON>StartList()<PERIOD>
}

void LegSpecs() : {}
{
    (LegSpec())+
}

void Meeting() : {}
{
  <MEETING> Name() Date()
  PoolSpecs()
  LegSpecs()
  <PERIOD>
}
