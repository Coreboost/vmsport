/* Generated By:JJTree&JavaCC: Do not edit this line. Hbl.java */
  public class Hbl/*@bgen(jjtree)*/implements HblTreeConstants, HblConstants {/*@bgen(jjtree)*/
  protected static JJTHblState jjtree = new JJTHblState();private static Integer error_count = 0;
    private static java.util.List<String> validation_messages = new java.util.ArrayList<String>();
    public static void main( String[] args ) {
      Hbl parser = new Hbl( System.in );
      try {
        SimpleNode node = parser.Start();
        if (error_count == 0) {
          System.out.println(node.generate().toString());
          System.exit(0);
        } else {
          System.exit(1);
        }
      } catch (Exception e) {
        System.out.println(e.getMessage());
        System.exit(2);
      }
    }

    public static void error(String message) {
      System.out.println(message);
      error_count++;
    }

  static final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ACCOUNTS:
        case HORSES:
        case TRACKS:
        case INCLUDE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ACCOUNTS:
            Accounts();
            break;
          case HORSES:
            Horses();
            break;
          case TRACKS:
            Tracks();
            break;
          case INCLUDE:
            Include();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException e) {
        HandleParseException(PERIOD, e);
        }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROGRAM:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        try {
          Program();
        } catch (ParseException e) {
        HandleParseException(PERIOD, e);
        }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MEETING:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        try {
          Meeting();
        } catch (ParseException e) {
        HandleParseException(PERIOD, e);
        }
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static void HandleParseException(int skipTo, ParseException e) throws ParseException {
                                                         /*@bgen(jjtree) HandleParseException */
ASTHandleParseException jjtn000 = new ASTHandleParseException(JJTHANDLEPARSEEXCEPTION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {error_count += 1;
  error(e.getMessage());
  if (skipTo != -1) {
    Token t;
    do {
      t = getNextToken();
    } while (t.kind != skipTo);
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  static final public ASTName Name() throws ParseException {
 /*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token name;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        name = jj_consume_token(IDENTIFIER);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.setName(name.image);{if (true) return jjtn000;}
        break;
      case STRING_LITERAL:
        name = jj_consume_token(STRING_LITERAL);
                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                           jjtc000 = false;
                                                                                          jjtn000.setName(name.image.substring(1, name.image.length()-1));{if (true) return jjtn000;}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Include() throws ParseException {
 /*@bgen(jjtree) Include */
  ASTInclude jjtn000 = new ASTInclude(JJTINCLUDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token path;
    try {
      jj_consume_token(INCLUDE);
      path = jj_consume_token(STRING_LITERAL);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                  jjtn000.setPath(path.image.substring(1, path.image.length()-1));
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void AccountSpec() throws ParseException {
 /*@bgen(jjtree) AccountSpec */
  ASTAccountSpec jjtn000 = new ASTAccountSpec(JJTACCOUNTSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token amount;
  ASTName name;
    try {
      name = Name();
      amount = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(name.getName());
    jjtn000.setAmount(Integer.parseInt(amount.image));
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Accounts() throws ParseException {
                   /*@bgen(jjtree) Accounts */
  ASTAccounts jjtn000 = new ASTAccounts(JJTACCOUNTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ACCOUNTS);
      label_4:
      while (true) {
        AccountSpec();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(PERIOD);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void HorseSpec() throws ParseException {
 /*@bgen(jjtree) HorseSpec */
  ASTHorseSpec jjtn000 = new ASTHorseSpec(JJTHORSESPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token rank;
  ASTName name;
    try {
      name = Name();
      rank = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(name.getName());
    jjtn000.setRank(Integer.parseInt(rank.image));
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Horses() throws ParseException {
                 /*@bgen(jjtree) Horses */
  ASTHorses jjtn000 = new ASTHorses(JJTHORSES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HORSES);
      label_5:
      while (true) {
        HorseSpec();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(PERIOD);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void TrackSpec() throws ParseException {
 /*@bgen(jjtree) TrackSpec */
  ASTTrackSpec jjtn000 = new ASTTrackSpec(JJTTRACKSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTName name;
    try {
      name = Name();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setName(name.getName());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Tracks() throws ParseException {
                 /*@bgen(jjtree) Tracks */
  ASTTracks jjtn000 = new ASTTracks(JJTTRACKS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRACKS);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_6;
        }
        TrackSpec();
      }
      jj_consume_token(PERIOD);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public ASTDate Date() throws ParseException {
 /*@bgen(jjtree) Date */
  ASTDate jjtn000 = new ASTDate(JJTDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token year;
  Token month;
  Token day;
    try {
      year = jj_consume_token(NUMBER);
      jj_consume_token(DASH);
      month = jj_consume_token(NUMBER);
      jj_consume_token(DASH);
      day = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setDate(Integer.parseInt(year.image), Integer.parseInt(month.image), Integer.parseInt(day.image));
    {if (true) return jjtn000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DDSpec() throws ParseException {
 /*@bgen(jjtree) DDSpec */
  ASTDDSpec jjtn000 = new ASTDDSpec(JJTDDSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTLegList legList;
    try {
      try {
        jj_consume_token(DD);
        legList = LegList();
                            legList.validate(2);
        jj_consume_token(PERIOD);
      } catch (ParseException e) {
    HandleParseException(PERIOD, e);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public ASTLegList LegList() throws ParseException {
 /*@bgen(jjtree) LegList */
  ASTLegList jjtn000 = new ASTLegList(JJTLEGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token leg;
    try {
      label_7:
      while (true) {
        leg = jj_consume_token(NUMBER);
                 jjtn000.addLeg(Integer.parseInt(leg.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void V75Spec() throws ParseException {
 /*@bgen(jjtree) V75Spec */
  ASTV75Spec jjtn000 = new ASTV75Spec(JJTV75SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTLegList legList;
    try {
      try {
        jj_consume_token(V75);
        legList = LegList();
                            legList.validate(7);
        jj_consume_token(PERIOD);
      } catch (ParseException e) {
    HandleParseException(PERIOD, e);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void PoolSpecs() throws ParseException {
                    /*@bgen(jjtree) PoolSpecs */
  ASTPoolSpecs jjtn000 = new ASTPoolSpecs(JJTPOOLSPECS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DD:
        case V75:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DD:
          DDSpec();
          break;
        case V75:
          V75Spec();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void StartList() throws ParseException {
 /*@bgen(jjtree) StartList */
  ASTStartList jjtn000 = new ASTStartList(JJTSTARTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTName name;
    try {
      label_9:
      while (true) {
        name = Name();
                jjtn000.addHorse(name.getName());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case STRING_LITERAL:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_9;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LegSpec() throws ParseException {
 /*@bgen(jjtree) LegSpec */
  ASTLegSpec jjtn000 = new ASTLegSpec(JJTLEGSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token leg;
    try {
      try {
        jj_consume_token(LEG);
        leg = jj_consume_token(NUMBER);
        StartList();
        jj_consume_token(PERIOD);
      jjtn000.setLeg(Integer.parseInt(leg.image));
      } catch (ParseException e) {
    HandleParseException(PERIOD, e);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LegSpecs() throws ParseException {
                   /*@bgen(jjtree) LegSpecs */
  ASTLegSpecs jjtn000 = new ASTLegSpecs(JJTLEGSPECS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        LegSpec();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEG:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_10;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Program() throws ParseException {
 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTName track;
  ASTDate date;
    try {
      jj_consume_token(PROGRAM);
      track = Name();
                jjtn000.setTrack(track.getName());
      date = Date();
               jjtn000.setDate(date.toString());
      PoolSpecs();
      LegSpecs();
      jj_consume_token(PERIOD);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Meeting() throws ParseException {
 /*@bgen(jjtree) Meeting */
  ASTMeeting jjtn000 = new ASTMeeting(JJTMEETING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTName track;
  ASTDate date;
    try {
      jj_consume_token(MEETING);
      track = Name();
                jjtn000.setTrack(track.getName());
      date = Date();
               jjtn000.setDate(date.toString());
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEG:
        case DD:
        case V75:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DD:
        case V75:
          Bet();
          break;
        case LEG:
          LegResult();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(PERIOD);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void LegResult() throws ParseException {
 /*@bgen(jjtree) LegResult */
  ASTLegResult jjtn000 = new ASTLegResult(JJTLEGRESULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token leg;
    try {
      try {
        jj_consume_token(LEG);
        leg = jj_consume_token(NUMBER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
        case NUMBER:
          ResultList();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(PERIOD);
     jjtn000.setLeg(Integer.parseInt(leg.image));
      } catch (ParseException e) {
    HandleParseException(PERIOD, e);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ResultList() throws ParseException {
 /*@bgen(jjtree) ResultList */
  ASTResultList jjtn000 = new ASTResultList(JJTRESULTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTResultEntry entry;
    try {
      entry = ResultEntry();
                       jjtn000.addEntry(entry.getHorses());
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
        case NUMBER:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_12;
        }
        entry = ResultEntry();
                                                                                    jjtn000.addEntry(entry.getHorses());
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public ASTResultEntry ResultEntry() throws ParseException {
 /*@bgen(jjtree) ResultEntry */
  ASTResultEntry jjtn000 = new ASTResultEntry(JJTRESULTENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token number;
  ASTTie tie;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        number = jj_consume_token(NUMBER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.setEntry(Integer.parseInt(number.image)); {if (true) return jjtn000;}
        break;
      case LEFT_PAREN:
        tie = Tie();
                                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                                      jjtc000 = false;
                                                                                                      jjtn000.setEntry(tie.getHorses()); {if (true) return jjtn000;}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTTie Tie() throws ParseException {
 /*@bgen(jjtree) Tie */
  ASTTie jjtn000 = new ASTTie(JJTTIE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token horse;
    try {
      jj_consume_token(LEFT_PAREN);
      horse = jj_consume_token(NUMBER);
                               jjtn000.addHorse(Integer.parseInt(horse.image));
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_13;
        }
        horse = jj_consume_token(NUMBER);
                                                                                                    jjtn000.addHorse(Integer.parseInt(horse.image));
      }
      jj_consume_token(RIGHT_PAREN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Bet() throws ParseException {
              /*@bgen(jjtree) Bet */
  ASTBet jjtn000 = new ASTBet(JJTBET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DD:
        DDBet();
        break;
      case V75:
        V75Bet();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DDBet() throws ParseException {
 /*@bgen(jjtree) DDBet */
  ASTDDBet jjtn000 = new ASTDDBet(JJTDDBET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token amount;
  Token repeatCount;
  ASTName betID;
  ASTName accountID;
  ASTHorseSelection selection;
    try {
      jj_consume_token(DD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPEAT:
        jj_consume_token(REPEAT);
        repeatCount = jj_consume_token(NUMBER);
                                       jjtn000.setRepeatCount(Integer.parseInt(repeatCount.image));
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case STRING_LITERAL:
        betID = Name();
                                                                                                                      jjtn000.setBetID(betID.getName());
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORTUNA:
        jj_consume_token(FORTUNA);
                                                                                                                                                                       jjtn000.setFortuna(true);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      amount = jj_consume_token(NUMBER);
                                                                                                                                                                                                                    jjtn000.setAmount(Integer.parseInt(amount.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACCOUNT:
        jj_consume_token(ACCOUNT);
        accountID = Name();
                                jjtn000.setAccountID(accountID.getName());
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DD_1:
        jj_consume_token(DD_1);
        selection = HorseSelection();
                                       selection.setRace(1);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DD_2:
        jj_consume_token(DD_2);
        selection = HorseSelection();
                                       selection.setRace(2);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(PERIOD);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.validate();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public ASTHorseSelection HorseSelection() throws ParseException {
 /*@bgen(jjtree) HorseSelection */
  ASTHorseSelection jjtn000 = new ASTHorseSelection(JJTHORSESELECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token horse;
  Token reserve;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL_HORSES:
          jj_consume_token(ALL_HORSES);
                   jjtn000.setAllHorses(true);
          jj_consume_token(PERIOD);
          break;
        case PERIOD:
        case NUMBER:
        case RESERVES:
        case FORTUNA_SELECT:
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NUMBER:
              ;
              break;
            default:
              jj_la1[26] = jj_gen;
              break label_14;
            }
            horse = jj_consume_token(NUMBER);
                       jjtn000.addHorse(Integer.parseInt(horse.image));
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESERVES:
          case FORTUNA_SELECT:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case RESERVES:
              jj_consume_token(RESERVES);
              label_15:
              while (true) {
                reserve = jj_consume_token(NUMBER);
                                    jjtn000.addReserve(Integer.parseInt(reserve.image));
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NUMBER:
                  ;
                  break;
                default:
                  jj_la1[27] = jj_gen;
                  break label_15;
                }
              }
              break;
            case FORTUNA_SELECT:
              jj_consume_token(FORTUNA_SELECT);
                       jjtn000.setFortunaSelect(true);
              break;
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          jj_consume_token(PERIOD);
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    HandleParseException(PERIOD, e);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void V75Bet() throws ParseException {
 /*@bgen(jjtree) V75Bet */
  ASTV75Bet jjtn000 = new ASTV75Bet(JJTV75BET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token amount;
  Token repeatCount;
  ASTName betID;
  ASTName accountID;
  ASTMultiplier mult;
  ASTHorseSelection selection;
    try {
      jj_consume_token(V75);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPEAT:
        jj_consume_token(REPEAT);
        repeatCount = jj_consume_token(NUMBER);
                                        jjtn000.setRepeatCount(Integer.parseInt(repeatCount.image));
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case STRING_LITERAL:
        betID = Name();
                                                                                                                      jjtn000.setBetID(betID.getName());
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case X1:
      case X2:
      case X3:
      case X4:
      case X5:
      case X10:
      case X20:
      case X50:
      case X100:
      case FORTUNA:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case X1:
        case X2:
        case X3:
        case X4:
        case X5:
        case X10:
        case X20:
        case X50:
        case X100:
          mult = Multiplier();
                      jjtn000.setMultiplier(mult.getValue());
          break;
        case FORTUNA:
          jj_consume_token(FORTUNA);
               jjtn000.setFortuna(true);
          amount = jj_consume_token(NUMBER);
                                                           jjtn000.setAmount(Integer.parseInt(amount.image));
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOST:
        jj_consume_token(BOOST);
           jjtn000.setBoost(true);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACCOUNT:
        jj_consume_token(ACCOUNT);
        accountID = Name();
                               jjtn000.setAccountID(accountID.getName());
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case V75_1:
        jj_consume_token(V75_1);
        selection = HorseSelection();
                                        selection.setRace(1);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case V75_2:
        jj_consume_token(V75_2);
        selection = HorseSelection();
                                        selection.setRace(2);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case V75_3:
        jj_consume_token(V75_3);
        selection = HorseSelection();
                                        selection.setRace(3);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case V75_4:
        jj_consume_token(V75_4);
        selection = HorseSelection();
                                        selection.setRace(4);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case V75_5:
        jj_consume_token(V75_5);
        selection = HorseSelection();
                                        selection.setRace(5);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case V75_6:
        jj_consume_token(V75_6);
        selection = HorseSelection();
                                        selection.setRace(6);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case V75_7:
        jj_consume_token(V75_7);
        selection = HorseSelection();
                                        selection.setRace(7);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(PERIOD);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public ASTMultiplier Multiplier() throws ParseException {
 /*@bgen(jjtree) Multiplier */
  ASTMultiplier jjtn000 = new ASTMultiplier(JJTMULTIPLIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case X1:
        jj_consume_token(X1);
         jjtn000.setValue(1);
        break;
      case X2:
        jj_consume_token(X2);
        jjtn000.setValue(2);
        break;
      case X3:
        jj_consume_token(X3);
        jjtn000.setValue(3);
        break;
      case X4:
        jj_consume_token(X4);
        jjtn000.setValue(4);
        break;
      case X5:
        jj_consume_token(X5);
        jjtn000.setValue(5);
        break;
      case X10:
        jj_consume_token(X10);
         jjtn000.setValue(10);
        break;
      case X20:
        jj_consume_token(X20);
         jjtn000.setValue(20);
        break;
      case X50:
        jj_consume_token(X50);
         jjtn000.setValue(50);
        break;
      case X100:
        jj_consume_token(X100);
          jjtn000.setValue(100);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HblTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7400000,0x7400000,0x8000000,0x10000000,0x0,0x0,0x0,0x0,0x200000,0xc0000000,0xc0000000,0x0,0x20000000,0xe0000000,0xe0000000,0x280000,0x280000,0x280000,0x200000,0xc0000000,0x0,0x0,0x0,0x800000,0x0,0x0,0x200000,0x200000,0x0,0x0,0x208000,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x6000000,0x6000000,0x0,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x6000000,0x100000,0x0,0x2,0x4,0x0,0x0,0x600000,0x600000,0xe00000,0x80000,0x6000000,0x17fc00,0x17fc00,0x1000000,0x0,0x8,0x10,0x20,0x40,0x80,0x100,0x200,0x7fc00,};
   }

  /** Constructor with InputStream. */
  public Hbl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Hbl(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HblTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Hbl(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HblTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Hbl(HblTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(HblTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  }
