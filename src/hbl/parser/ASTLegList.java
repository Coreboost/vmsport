/* Generated By:JJTree: Do not edit this line. ASTLegList.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import javax.json.*;
import java.util.ArrayList;
import java.util.List;
public
class ASTLegList extends SimpleNode {
  ArrayList<Integer> legs = new ArrayList<Integer>();

  public ASTLegList(int id) {
    super(id);
  }

  public ASTLegList(Hbl p, int id) {
    super(p, id);
  }

  public void addLeg(Integer l) {
    legs.add(l);
  }

  public List<Integer> getLegs() {
    return legs;
  }

  // Returns the actual leg number in the program corresponding to
  // the pool leg given. i.e., if DD is specified as a pool forEach
  // legs 8 and 10 in the program then 1->8 and 2->10.
  public Integer getActualLeg(Integer poolLeg) {
    if (poolLeg <= legs.size()) {
      return legs.get(poolLeg-1);
    } else {
      // If the leg is not explicitly specified assumed that the pool legs
      // are consecutive.
      return legs.get(legs.size()-1) + poolLeg - legs.size();
    }
  }

  public void validate(Integer maxLegs, ASTLegSpecs legSpecs) {
    if (legs.size() > maxLegs) {
      ParseException.setSemanticError("Too many legs, a maximum of " + maxLegs + " allowed, found " + legs.size() + ".");
      parser.error(parser.generateParseException().getMessage());
    }
    if (legs.size() > 1) {
      for (int i=1; i < legs.size(); i += 1) {
        if (!(legs.get(i)>legs.get(i-1))) {
          ParseException.setSemanticError("Leg numbers must be in increasing order.");
          parser.error(parser.generateParseException().getMessage());
        }
      }
    }
    for (int i=0; i < legs.size(); i += 1) {
      if (!legSpecs.legExists(legs.get(i))) {
        ParseException.setSemanticError(legs.get(i) + " is not a valid leg number.");
        parser.error(parser.generateParseException().getMessage());
      }
    }
  }

  public void generateSpecifics(JsonObjectBuilder builder) {
    JsonArrayBuilder myBuilder = Json.createArrayBuilder();
    legs.forEach((leg) -> myBuilder.add(leg));
    builder.add("legs", myBuilder.build());
  }

}
/* JavaCC - OriginalChecksum=f6fae3fe3e12f9cdfbff2ca8b48c0389 (do not edit this line) */
